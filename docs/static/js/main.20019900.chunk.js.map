{"version":3,"sources":["lib/choose.ts","lib/maps/intro.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["meetsRequirements","s","reqs","_","r","canSee","a","currentArea","areas","v","currentLocation","describeArea","concat","id","description","ahs","filter","map","join","describeActions","actionHooks","introAreas","requirements","newState","actionDescription","benchQuestStarted","benchQuestCompleted","ActionButton","p","react_default","createElement","onClick","handleGameAction","disabled","App","messagesEnd","React","createRef","state","gameState","messages","scrollToBottom","_this","current","scrollIntoView","behavior","area","choose","effects","actionid","ahsForId","nextState","Array","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","ah","value","Object","objectSpread","push","err","return","e","areaDesc","setState","this","enabled","_this2","className","m","ref","actions","App_ActionButton","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.20019900.chunk.js","sourcesContent":["import * as _ from \"lodash\";\n\nexport interface State {\n    currentLocation: string;\n    benchQuestStarted?: boolean;\n    benchQuestCompleted?: boolean;\n}\n\ntype ActionEffect = [string, State];\n\ntype UpdateState = (s: State) => State;\n\ntype NewState = State | UpdateState;\n\nexport interface ActionHook {\n    id: string;\n    requirements: Array<object>;\n    newState: NewState;\n    canSee?: (s: State) => boolean;\n    description: (s: State) => string;\n    actionDescription: (s: State) => string;\n}\n\nexport function meetsRequirements(s: State, reqs: Array<object>): boolean {\n    return _.every(reqs, r => _.isMatch(s, r));\n}\n\nexport function canSee(s: State, a: ActionHook): boolean {\n    return !a.canSee || a.canSee(s)\n}\n\nexport function runActionHooks(s: State, actionid: string, ahs: Array<ActionHook>): Array<ActionEffect> {\n    const ahsForId: Array<ActionHook> = ahs.filter(a => a.id === actionid).filter(a => canSee(s, a));\n    var nextState: State = s;\n    var effects = new Array<ActionEffect>();\n\n    for (let ah of ahsForId) {\n        let newState: State;\n        if (typeof ah.newState === \"function\") {\n            newState = ah.newState(nextState);\n        } else {\n            newState = ah.newState;\n        }\n\n        if (meetsRequirements(nextState, ah.requirements)) {\n            nextState = { ...nextState, ...newState }\n            effects.push([ah.actionDescription(nextState), nextState]);\n        }\n    }\n\n    return effects;\n}\n\nexport function describeActions(s: State, ahs: Array<ActionHook>): string {\n    return ahs.filter(a => canSee(s, a)).map(a => `${a.id} : ${a.description(s)}`).join(\"\\n\");\n}\n\nexport function possiblePlayerActions(s: State, ahs: Array<ActionHook>): Array<PlayerAction> {\n    return ahs.filter(a => canSee(s, a)).map(a => {\n        return {\n            id: a.id,\n            description: a.description(s),\n            enabled: meetsRequirements(s, a.requirements)\n        }\n    });\n}\n\nexport interface Area {\n    id: string;\n    description: (s: State) => string;\n    actionHooks: Array<ActionHook>;\n}\n\nexport interface PlayerAction {\n    id: string;\n    description: string;\n    enabled: boolean;\n}\n\nexport function currentArea(s: State, areas: Array<Area>): Area {\n    let allPlaces: _.Dictionary<Area> = _.mapValues(_.groupBy(areas, 'id'), v => v[0]);\n    return allPlaces[s.currentLocation];\n}\n\nexport function describeArea(s: State, a: Area): string {\n    return `You're in ${a.id} \\n ${a.description(s)} \\n ${describeActions(s, a.actionHooks)}`\n}\n","import { State, Area, ActionHook } from '../choose';\n\nexport let nh: ActionHook = {\n  id: \"south\",\n  requirements: [{ currentLocation: \"introArea\" }],\n  newState: { currentLocation: \"southOfIntro\" },\n  description: _ => \"There's a stone path going south\",\n  actionDescription: _ => \"You walk south down the stone path\"\n}\n\nexport let nhs: ActionHook = {\n  id: \"north\",\n  requirements: [{ currentLocation: \"southOfIntro\" }],\n  newState: { currentLocation: \"introArea\" },\n  description: _ => \"There's a stone path going north\",\n  actionDescription: _ => \"You walk north up the stone path\"\n}\n\nexport let sitOnBenchNotStarted: ActionHook = {\n  id: \"sit on bench\",\n  requirements: [{ currentLocation: \"southOfIntro\", benchQuestStarted: false }],\n  canSee: s => s.benchQuestStarted === false,\n  newState: { currentLocation: \"southOfIntro\" },\n  description: _ => \"Theres a nice bench\",\n  actionDescription: _ => \"You sit on the bench\"\n}\n\nexport let sitOnBenchStarted: ActionHook = {\n  id: \"sit on bench\",\n  requirements: [{ currentLocation: \"southOfIntro\", benchQuestStarted: true }],\n  canSee: s => s.benchQuestStarted === true,\n  newState: { currentLocation: \"southOfIntro\", benchQuestCompleted: true },\n  description: _ => \"The bench has a strange glow...\",\n  actionDescription: _ => \"You sit on the bench and feel a surge of energy.\"\n}\nexport let west: ActionHook = {\n  id: \"west\",\n  requirements: [{ currentLocation: \"southOfIntro\" }],\n  newState: { currentLocation: \"introMarket\" },\n  description: _ => \"There's a dirt path west to the market\",\n  actionDescription: _ => \"You walk along the dirt path to the market\"\n}\n\nexport let east: ActionHook = {\n  id: \"east\",\n  requirements: [{ currentLocation: \"introMarket\" }],\n  newState: { currentLocation: \"southOfIntro\" },\n  description: _ => \"There's a dirt path east leading back to the park\",\n  actionDescription: _ => \"You walk east along the path back to the park.\"\n}\n\nexport let talkToIntroGuy: ActionHook = {\n  id: \"talk intro guy\",\n  requirements: [{ currentLocation: \"introMarket\" }],\n  newState: (s: State) => { if (!s.benchQuestStarted) { s.benchQuestStarted = true } return s; },\n  description: s => !s.benchQuestStarted ? \"This guy looks like he has a quest\" : \"Talk to him after sitting on bench\",\n  actionDescription: s => !s.benchQuestCompleted ? \"You talk to the intro guy. he says sit on the bench\" : \"Congrats on finishing your first quest!\"\n}\n\nexport let swordShop: ActionHook = {\n  id: \"enter sword shop\",\n  requirements: [{ currentLocation: \"introMarket\" }],\n  newState: { currentLocation: \"swordShop\" },\n  description: _ => \"A shop where you can buy swords\",\n  actionDescription: _ => \"You enter the sword shop\"\n}\n\nexport let backToMarket: ActionHook = {\n  id: \"back to market\",\n  requirements: [{ currentLocation: \"swordShop\" }],\n  newState: { currentLocation: \"introMarket\" },\n  description: _ => \"Leave the sword shop\",\n  actionDescription: _ => \"you leave the sword shop\"\n}\n\nlet swordShopArea: Area = {\n  id: \"swordShop\",\n  description: _ => \"Inside a shop filled with pointy things\",\n  actionHooks: [backToMarket]\n};\n\nlet introArea: Area = {\n  id: \"introArea\",\n  description: _ => \"You're in the intro!\",\n  actionHooks: [nh]\n};\n\nlet southOfIntroArea: Area = {\n  id: \"southOfIntro\",\n  description: _ => \"You're in a nice park to the south\",\n  actionHooks: [nhs, sitOnBenchStarted, sitOnBenchNotStarted, west]\n};\n\nlet introMarketArea: Area = {\n  id: \"introMarket\",\n  description: _ => \"You're in a bustling market\",\n  actionHooks: [talkToIntroGuy, east, swordShop]\n};\n\nexport let introAreas = [introArea, southOfIntroArea, introMarketArea, swordShopArea]\n","import React, { Component } from 'react';\nimport './App.css';\nimport * as choose from './lib/choose';\nimport { introAreas } from './lib/maps/intro';\n\ninterface IState {\n    gameState: choose.State;\n    messages: Array<string>;\n}\n\ninterface ABProps {\n    handleGameAction:(a:string)=>void,\n    disabled: boolean,\n    id: string,\n    description: string\n}\n\nconst ActionButton = (p:ABProps) =>\n    <button onClick = {() => p.handleGameAction(p.id)}\n            disabled = {p.disabled }>\n        <h2> {p.id} </h2>\n        <p> {p.description} </p>\n    </button>;\n\nclass App extends Component<{}, IState> {\n    messagesEnd: React.RefObject<HTMLDivElement> = React.createRef()\n\n    state:IState = {\n        gameState: {\n            currentLocation: \"introArea\",\n            benchQuestStarted:false,\n            benchQuestCompleted:false},\n        messages:[]\n    }\n\n    scrollToBottom = () => {\n        if (this.messagesEnd && this.messagesEnd.current && this.messagesEnd.current.scrollIntoView){\n            this.messagesEnd.current.scrollIntoView({ behavior: 'smooth' })\n        }\n    }\n\n    componentWillMount() {\n        let areaDesc = choose.describeArea(this.state.gameState,choose.currentArea(this.state.gameState, introAreas))\n        this.state.messages.push(areaDesc);\n    }\n\n    componentDidMount() {\n        this.scrollToBottom();\n    }\n\n    componentDidUpdate() {\n        this.scrollToBottom();\n    }\n\n    actions():Array<choose.PlayerAction> {\n        const p:choose.Area = choose.currentArea(this.state.gameState,introAreas);\n        const actions2:Array<choose.PlayerAction> = choose.possiblePlayerActions(this.state.gameState,p.actionHooks);\n        return actions2;\n    }\n\n    handleGameAction = (a:string) => {\n        const area = choose.currentArea(this.state.gameState,introAreas);\n        const effects  = choose.runActionHooks(this.state.gameState,a ,area.actionHooks);\n        var nextState: choose.State = this.state.gameState;\n        for (var e of effects) {\n            this.state.messages.push(e[0]);\n            nextState = e[1];\n        }\n        let areaDesc = choose.describeArea(nextState,choose.currentArea(nextState,introAreas));\n        this.state.messages.push(areaDesc);\n\n        this.setState({...this.state, gameState:{...this.state.gameState, ...nextState}});\n    }\n\n  render() {\n      return (\n      <div className=\"App\">\n          <div className=\"Messages\">\n              <ul>\n              {this.state.messages.map(m => <li> {m}</li>)}\n                  <div ref={this.messagesEnd} />\n              </ul>\n          </div>\n          <div className=\"Actions\">\n          {this.actions().map(a =>\n              <ActionButton handleGameAction = {this.handleGameAction }\n              disabled = {!a.enabled}\n              id = {a.id}\n              description = {a.description}\n              />)}\n          </div>\n      </div>\n      );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}